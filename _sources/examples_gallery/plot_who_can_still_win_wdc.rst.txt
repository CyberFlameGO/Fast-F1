
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples_gallery/plot_who_can_still_win_wdc.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_gallery_plot_who_can_still_win_wdc.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_gallery_plot_who_can_still_win_wdc.py:

Who can still win the drivers WDC?
======================================

Calculates which drivers still has chance to win the WDC.
Simplified since it doesn't compare positions if points are equal.

This example implements 3 functions that it then uses to calculate
it's result.

.. GENERATED FROM PYTHON SOURCE LINES 10-17

.. code-block:: default


    import requests
    import fastf1

    fastf1.Cache.enable_cache("../doc_cache")  # replace with your cache directory









.. GENERATED FROM PYTHON SOURCE LINES 18-21

We need a function to get the current driver standings from
Ergast and returns as list of drivers.
Reference https://ergast.com/mrd/methods/standings/

.. GENERATED FROM PYTHON SOURCE LINES 21-29

.. code-block:: default

    def get_drivers_standings():
        url = "https://ergast.com/api/f1/current/driverStandings.json"
        response = requests.get(url)
        data = response.json()
        drivers_standings = data['MRData']['StandingsTable']['StandingsLists'][0]['DriverStandings']  # noqa: E501
        return drivers_standings









.. GENERATED FROM PYTHON SOURCE LINES 30-33

We need a function to calculates the maximum amount of points possible if a
driver wins everything left of the season.
https://en.wikipedia.org/wiki/List_of_Formula_One_World_Championship_points_scoring_systems

.. GENERATED FROM PYTHON SOURCE LINES 33-51

.. code-block:: default

    def calculate_max_points_for_remaining_season():
        POINTS_FOR_SPRINT = 8 + 25 + 1  # Winning the sprint, race and fastest lap
        POINTS_FOR_CONVENTIONAL = 25 + 1  # Winning the race and fastest lap

        events = fastf1.events.get_events_remaining()
        # Count how many sprints and conventional races are left
        sprint_events = \
            len(events.loc[events["EventFormat"] == "sprint"])
        conventional_events = \
            len(events.loc[events["EventFormat"] == "conventional"])

        # Calculate points for each
        sprint_points = sprint_events * POINTS_FOR_SPRINT
        conventional_points = conventional_events * POINTS_FOR_CONVENTIONAL

        return sprint_points + conventional_points









.. GENERATED FROM PYTHON SOURCE LINES 52-58

For each driver we will see if there is a chance to get more points than
the current leader. We assume the leader gets no more points and the
driver gets the theoretical maximum amount of points.

We currently don't consider the case of two drivers getting equal points
since its more complicated and would require comparing positions.

.. GENERATED FROM PYTHON SOURCE LINES 58-72

.. code-block:: default

    def calculate_who_can_win(driver_standings, max_points):
        LEADER_POINTS = int(driver_standings[0]['points'])

        for _, driver in enumerate(driver_standings):
            driver_max_points = int(driver["points"]) + max_points
            can_win = 'No' if driver_max_points < LEADER_POINTS else 'Yes'

            print(f"{driver['position']}: \
    {driver['Driver']['code']}, \
    Current points: {driver['points']}, \
    Theoretical max points: {driver_max_points}, \
    Can win: {can_win}")









.. GENERATED FROM PYTHON SOURCE LINES 73-75

Now using the 3 functions above we can use them to calculate who
can still win.

.. GENERATED FROM PYTHON SOURCE LINES 75-84

.. code-block:: default


    # Get the current drivers standings
    driver_standings = get_drivers_standings()

    # Get the maximum amount of points
    points = calculate_max_points_for_remaining_season()

    # Print which drivers can still win
    calculate_who_can_win(driver_standings, points)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    1: VER, Current points: 69, Theoretical max points: 637, Can win: Yes
    2: PER, Current points: 54, Theoretical max points: 622, Can win: Yes
    3: ALO, Current points: 45, Theoretical max points: 613, Can win: Yes
    4: HAM, Current points: 38, Theoretical max points: 606, Can win: Yes
    5: SAI, Current points: 20, Theoretical max points: 588, Can win: Yes
    6: STR, Current points: 20, Theoretical max points: 588, Can win: Yes
    7: RUS, Current points: 18, Theoretical max points: 586, Can win: Yes
    8: NOR, Current points: 8, Theoretical max points: 576, Can win: Yes
    9: HUL, Current points: 6, Theoretical max points: 574, Can win: Yes
    10: LEC, Current points: 6, Theoretical max points: 574, Can win: Yes
    11: BOT, Current points: 4, Theoretical max points: 572, Can win: Yes
    12: OCO, Current points: 4, Theoretical max points: 572, Can win: Yes
    13: PIA, Current points: 4, Theoretical max points: 572, Can win: Yes
    14: GAS, Current points: 4, Theoretical max points: 572, Can win: Yes
    15: ZHO, Current points: 2, Theoretical max points: 570, Can win: Yes
    16: TSU, Current points: 1, Theoretical max points: 569, Can win: Yes
    17: MAG, Current points: 1, Theoretical max points: 569, Can win: Yes
    18: ALB, Current points: 1, Theoretical max points: 569, Can win: Yes
    19: SAR, Current points: 0, Theoretical max points: 568, Can win: Yes
    20: DEV, Current points: 0, Theoretical max points: 568, Can win: Yes





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  1.274 seconds)


.. _sphx_glr_download_examples_gallery_plot_who_can_still_win_wdc.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_who_can_still_win_wdc.py <plot_who_can_still_win_wdc.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_who_can_still_win_wdc.ipynb <plot_who_can_still_win_wdc.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
